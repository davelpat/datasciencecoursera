setwd("~/GitHub/datasciencecoursera/data_science_repo/Getting+Cleaning_data")
date()
# Mon Feb 16 00:24:23 2015
# Mon Mar  8 23:20:00 2015
## Quiz 1, Q1 ##
install.packages("data.table")
library("data.table")
# data.table version 1.9.4
data_dir <- "./data"
if(!file.exists(data_dir)) {dir.create(data_dir)}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
hdata_file <- "./data/ss06hid.csv"
download.file(fileURL, destfile=hdata_file)
list.files(data_dir)
code_book <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
hdata_code_book="./PUMSDataDict06.pdf"
download.file(code_book, destfile=hdata_code_book)
hdata <- read.csv(hdata_file)
# View hdata in RStudio env window
# 'data.frame':    6496 obs. of  188 variables
HDataTab <- data.table(hdata)
tables()
head(HDataTab[,VAL==24])
sum(HDataTab[,VAL==24], na.rm=T)
# 53
## Quiz 1, Q2 ##
# FES: Family type and employment status
# Tidy data has one variable per column.
## Quiz 1, Q3 ##
install.packages("xlsx")
library("xlsx")
ngapURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
# binary data
download.file(url = ngapURL, destfile = "./data/ngap_data.xlsx" ,mode="wb")
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx(file = "./data/ngap_data.xlsx", sheetIndex = 1, rowIndex=rowIndex, colIndex=colIndex)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
# 36534720
## Quiz 1, Q4 ##
install.packages("XML")
library("XML", lib.loc="~/R/win-library/3.1")
# xmlTreeParse cannot parse https
# boston_rest_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
# xml_doc <- xmlTreeParse(boston_rest_url,useInternalNodes = T)
boston_rest_url <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xml_doc <- xmlTreeParse(boston_rest_url,useInternalNodes = T)
br_root <- xmlRoot(xml_doc)
# NOTE! Use xpathSApply, NOT xmlSApply
zips <- xpathSApply(br_root, "//zipcode", xmlValue)
sum(sapply(zips, identical, "21231"), na.rm=T)
## Quiz 1, Q5 ##
## Profiling notes
# https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=r%20rprof%20tutorial
# https://rdatamining.wordpress.com/2012/08/01/examples-of-profiling-r-code/
# http://www.stat.berkeley.edu/~nolan/stat133/Fall05/lectures/profilingEx.html
# 
# packages profr and proftools provide graphical tools
# To successfully use proftools you need to make sure you have Rgraphviz properly installed. You need to install it directly from the bioconductors site [2]:
# 
# R commands:
# 1 | source("http://bioconductor.org/biocLite.R")
# 2 | biocLite("Rgraphviz")
# 
# References:
# [1] Tidying and profiling R code chapter of the Writing R Extensions manual.
# [2] See http://www.bioconductor.org/install/
#
community_data_2006_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url = community_data_2006_url, destfile = "./data/ss06pid.csv")
library("data.table", lib.loc="~/R/win-library/3.1")
library("utils", lib.loc="C:/Program Files/R/R-3.1.2/library")
DT <- fread("./data/ss06pid.csv")
object.size(DT)
names(DT)
# clean out large objects from the environment before profiling
gc()
Rprof("m1.out", memory.profiling=T)
m1 <- replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean))
Rprof(NULL)
m1_summ <- summaryRprof("m1.out", memory="both")$by.self
m1_summ
gc()
Rprof("m2.out", memory.profiling=T)
m2 <- replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean))
Rprof(NULL)
m2_summ <- summaryRprof("m2.out", memory="both")$by.self
gc()
Rprof("m3.out")
cat("mean doesn't use by=DT$SEX, just passes it through")
m3 <- replicate(1000, mean(DT$pwgtp15,by=DT$SEX))
Rprof(NULL)
m3_summ <- summaryRprof("m3.out")$by.self
gc()
Rprof("m4.out")
m4 <- replicate(1000, {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
m4_summ <- summaryRprof("m4.out")$by.self
Rprof(NULL)
m4_summ <- summaryRprof("m4.out")$by.self
gc()
Rprof("m5.out", memory.profiling=T)
m5 <- replicate(1000, DT[,mean(pwgtp15),by=SEX])
Rprof(NULL)
m5_summ <- summaryRprof("m5.out", memory="both")$by.self
Rprof("m6.out")
gc()
m6 <- replicate(1000,rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
Rprof(NULL)
Rprof("m6.out")
m6 <- replicate(1000, {rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
m1[1:2,1:6]
m2[1:2,1:6]
str(m3)
str(m4)
m5[1:2,1:6]
sum(m1_summ$self.time)
# 1.6
sum(m2_summ$self.time)
# 5.56
sum(m5_summ$self.time)
# 1.74
sapply(split(DT$pwgtp15,DT$SEX),mean)
install_from_swirl("Getting and Cleaning Data")